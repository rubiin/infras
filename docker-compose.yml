version: 3.9
services:
    nestify:
        container_name: nestify
        env_file: env/.env.${ENV}
        build:
            context: .
            dockerfile: ./docker/Dockerfile
        image: nestify
        depends_on:
            - traefik
            - redis
            - rabbitmq
            - database

        restart: unless-stopped
        command: npm run start:dev
        labels:
            - traefik.enable=true
            - traefik.http.routers.nestify.rule=Host(`${API_URL}`)
            - traefik.http.services.nestify.loadbalancer.server.port=3000
            - traefik.http.routers.nestify.entrypoints=websecure
            - traefik.http.routers.nestify.tls=true
            - traefik.http.routers.nestify.tls.certresolver=certresolver
            - traefik.http.routes.nestify.middlewares=traefik-headers,traefik-compress,traefik-ratelimit


        stdin_open: true
        tty: true
        networks:
            - nestify-network
        volumes:
            - .:/usr/src/app
            - /usr/src/app/node_modules

    traefik:
        image: traefik:v2.10.4
        container_name: traefik
        restart: unless-stopped
        command:
            # Enable Docker in Traefik, so that it reads labels from Docker services
            - --providers.docker=true
            # Do not expose all Docker services, only the ones explicitly exposed
            - --providers.docker.exposedbydefault=false
            # Disable Docker Swarm mode for local development
            # - --providers.docker.swarmmode
            # Enable the access log, with HTTP requests
            - --accesslog
            # Enable the Traefik log, for configurations and errors
            - --log
            - --log.level=DEBUG
            - --log.format=json
            - --log.filePath=/logs/traefik.log
            - --accesslog=true
            - --accesslog.filePath=/logs/access.log
            # Enable the Dashboard and API
            - --api
            # Enable the Dashboard and API in insecure mode for local development
            - --api.insecure=true
            # Define HTTP entrypoint on port 80
            - --entrypoints.web.address=:80
            # Define HTTPS entrypoint on port 443
            - --entrypoints.websecure.address=:443
            # Enable Let's Encrypt certificate resolver
            - --certificatesresolvers.certresolver.acme.tlschallenge=true
            # Email address used for Let's Encrypt registration
            - --certificatesresolvers.certresolver.acme.email=test@email.com
            # Path to store Let's Encrypt certificates
            - --certificatesresolvers.certresolver.acme.storage=/letsencrypt/acme.json
            # Redirect HTTP requests to HTTPS
            - --providers.middlewares.httpsredirect.redirectscheme.scheme=https
            # Enable Let's Encrypt staging environment for local development , remove this line for production
            - --certificatesresolvers.certresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory

        labels:
            - traefik.enable=true
            - traefik.http.middlewares.traefik-headers.headers.framedeny=true
            - traefik.http.middlewares.traefik-headers.headers.browserxssfilter=true
            - traefik.http.middlewares.traefik-headers.headers.contentTypeNosniff=true
            - traefik.http.middlewares.traefik-headers.headers.permissionsPolicy=camera 'none'; geolocation 'none'; microphone 'none'; payment 'none'; usb 'none'; vr 'none';
            - traefik.http.middlewares.traefik-compress.compress=true
            - traefik.http.middlewares.traefik-ratelimit.ratelimit.average=100
            - traefik.http.middlewares.traefik-ratelimit.ratelimit.burst=50
            - traefik.http.middlewares.traefik-ratelimit.ratelimit.period=1m

        networks:
            - nestify-network
        ports:
            - "443:443"
            - "80:80"
            - "8080:8080"
        volumes:
            - ./letsencrypt:/letsencrypt
            - ./logs/:/logs/
            - /var/run/docker.sock:/var/run/docker.sock:ro
        healthcheck:
            # Run traefik healthcheck command
            # https://doc.traefik.io/traefik/operations/cli/#healthcheck
            test: ["CMD", "traefik", "healthcheck", "--ping"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 5s

    redis:
        container_name: redis
        image: redis:7.0.12-alpine
        restart: unless-stopped
        depends_on:
            - traefik
        ports:
            - "6379:6379"
        networks:
            - nestify-network
        command: redis-server --loglevel warning --requirepass ${PASSWORD}
        volumes:
            - redis-data:/data
            - .conf/redis.conf:/usr/local/etc/redis/redis.conf
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5

    minio:
        image: minio/minio:RELEASE.2023-08-04T17-40-21Z
        container_name: minio
        restart: unless-stopped
        ports:
            - "4090:9000"
        networks:
            - nestify-network
        env_file: "env/${ENV}.env"
        entrypoint: sh
        volumes:
            - minio-data:/data
        command: -c 'mkdir -p /export/default-bucket && /usr/bin/minio server /export'
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
          interval: 30s
          timeout: 20s
          retries: 3

    rabbitmq:
        container_name: rabbitmq
        image: rabbitmq:3.12.2-management-alpine
        env_file: env/.env.${ENV}
        restart: unless-stopped
        networks:
            - nestify-network
        depends_on:
            - traefik
        environment:
            - RABBITMQ_DEFAULT_USER=nestify
        ports:
            - "5672:5672"
            - "15672:15672"
        volumes:
            - rabbitmq-data:/var/lib/rabbitmq/mnesia/
        healthcheck:
          test: rabbitmq-diagnostics check_port_connectivity
          interval: 30s
          timeout: 30s
          retries: 10

    database:
        container_name: database
        image: postgres:15.3-alpine
        restart: unless-stopped
        env_file: env/.env.${ENV}
        depends_on:
            - traefik
        networks:
            - nestify-network
        ports:
            - "5432:5432"
        volumes:
            - postgres_data:/var/lib/postgresql/data/
        healthcheck:
          test: ["CMD-SHELL", "pg_isready"]
          interval: 10s
          timeout: 5s
          retries: 5

    pgweb:
        image: sosedoff/pgweb
        container_name: pgweb
        env_file: env/.env.${ENV}
        restart: unless-stopped
        depends_on:
            - database
        networks:
            - nestify-network
        environment:
            - PGWEB_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
        ports:
            - "8091:8081"
        healthcheck:
            test: nc -vz 127.0.0.1 8081
            interval: 10s
            timeout: 5s
            retries: 5

volumes:
    redis-data:
    rabbitmq-data:
    postgres_data:

networks:
    nestify-network:
        name: nestify-network
